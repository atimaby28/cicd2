name: project deployment

on:
  push:
    branches: [main]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build jar with Gradle (uses build cache)
        uses: gradle/actions/setup-gradle@v4

      - name: Gradle build
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spring_basic:${{ github.run_number }}

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: run ssh
        uses: appleboy/ssh-action@v1
        with:
          host: 175.197.41.119
          username: test
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            kubectl get deploy -n swy -o wide

            # 새 버전을 Blue/Green 방식으로 배포
            kubectl set image deployment/spring-deployment-green spring-basic=${{ secrets.DOCKERHUB_USERNAME }}/spring_basic:${{ github.run_number }} -n swy

            # 새 버전 배포 상태 확인
            kubectl rollout status deployment/spring-deployment-green -n swy

            # 서비스 트래픽을 Green으로 전환
            kubectl patch service spring-service -n swy -p '{"spec":{"selector":{"app":"spring-green"}}}'

            # 기존 Blue 디플로이먼트 스케일 다운
            kubectl scale deployment/spring-deployment-blue --replicas=0 -n swy
